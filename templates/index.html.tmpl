<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>{{ .Title }}</title>
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
        <meta name="author" content="Evan Hazlett">
        <meta name="description" content="Single Penguin">
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
        <link rel="stylesheet" type="text/css" href="static/dist/semantic.min.css">
        <link rel="stylesheet" type="text/css" href="static/css/default.css">
        <script src="static/dist/semantic.min.js"></script>

        <script type="text/javascript">
            var containers = [];
            var lastSeen = {};
            var colors = new Object;
            //var refreshInterval = Number({{ .RefreshInterval }});
            var refreshInterval = 300000;

            function getPetsAsset(pets) {
                var asset;
                switch (pets) {
                    case "penguin":
                        asset = "static/img/tux.png"
                        break;
                	default:
						asset = "static/img/rancher-logo-cow-blue.png"
				}
				return asset;
			}

            function getColor(contColor) {
                var allColors = [
                    "red",
                    "orange",
                    "yellow",
                    "olive",
                    "green",
                    "teal",
                    "blue",
                    "violet",
                    "purple",
                    "pink"
                ]

                color = allColors[Math.floor(Math.random()*allColors.length)];

                if (color != contColor) {
                    return color;
                } else {
                    return getColor(contColor);
                }
            }

            function reload() {
                var ts = new Date().getTime();
                var expireInterval = Number({{ .ExpireInterval }});
                var removeInterval = Number({{ .RemoveInterval }});

                $.ajax({
                     headers: { 'Access-Control-Allow-Origin': '*' },
                     url: "/demo?" + ts,
                     dataType: "json",
                     cache: false,
                     beforeSend: function (request) {},
                     error: function() {
                         {{ if not .SkipErrors }}
                         $("#requests-error-count").text(parseInt($("#requests-error-count").text()) + 1);
                         $(".error").addClass("red");
                         {{ end }}
                     },
                     success: function(data){
                         if (! (colors.hasOwnProperty(data.version))) {
                             colors[data.version] = getColor(data.contColor);
                         }
                         var color = colors[data.version];
                         if ($.inArray(data.instance, containers) == -1) {
                             containers.push(data.instance);
                         }

                         var myColors = [
                                "red",
                                "orange",
                                "yellow",
                                "olive",
                                "green",
                                "teal",
                                "blue",
                                "violet",
                                "purple",
                                "pink"
                            ]

                         // Get the image element
                         var image = document.querySelector('img');
                         // Set the src attribute of the image to include the random number
                         image.src = "https://penguinpics.s3.eu-west-2.amazonaws.com/penguin" + data.randomNumber + ".png";

                         document.getElementById("randomRace").innerHTML = data.randomNumber;
                         document.getElementById("randomRace").style.color = myColors[data.randomNumber-1];

                         var contColor = data.contColor;
						 var petsAsset = getPetsAsset(data.pets);

                         // add timestamp for when we last saw this container
                         lastSeen[data.instance] = ts;

                         for (var i=0; i<containers.length; i++) {
                            var instanceName = containers[i];
                            var el = $("#instance-" + instanceName);
                            if (el.length == 0) {
                                console.log("creating instance " + instanceName);


                                // create a shorter display name for the tile
                                var displayName = instanceName.match(/.+-(\w+)$/);
                                if (!displayName) {
                                    displayName = instanceName;
                                } else {
                                  displayName = displayName[1];
                                }
                                
                                el = $("#instance-" + instanceName);
                            }

                            if (ts - lastSeen[instanceName] > refreshInterval) {
                                // expire old instances
                                var opacity = (1 - (ts - lastSeen[instanceName]) / 1000 / expireInterval).toFixed(2);

                                if ((ts - lastSeen[instanceName]) / 1000 > expireInterval + removeInterval) {
                                    console.log("removing instance " + instanceName);
                                    el.remove();
                                    containers.splice(i, 1);
                                    delete lastSeen[instanceName];
                                } else if (opacity >= 0.2) {
                                    $("#instance-" + instanceName).css('opacity', opacity);
                                }
                            } else {
                                // clear any previously-set opacity
                                $("#instance-" + instanceName).css('opacity', '');
                            }

                            // show which replica is active
                            var lbl = $("#instance-label-" + instanceName);
                            if (instanceName == data.instance) {
                                $(lbl).fadeIn(250);
                            } else {
                                $(lbl).fadeOut(250);
                            }
                         }

                         $("#current-container").text(data.instance);
                         $("#current-container-version").text(data.version);
                         $("#container-backend").removeClass('hide');
                         $("div.container-backend").show();
                         $("#extra-info").text(data.metadata);

                         $("#requests-count").text(parseInt($("#requests-count").text()) + 1);
                     }
                });
            }

            window.onload = reload;
        </script>
    </head>

    <body>
        <div class="ui single column relaxed doubling padded grid">
            <div class="ten wide column meta">
                <div class="ui container">
                    
                    <div class="row centered">
                        <!-- The <img> element -->
                        <img src="" alt="Penguin Image" style="width: 50%; border-radius: 5%;">
                    </div>

                    <div class="row centered container-backend hide">
                        <div class="ui statistic">
                            <div class="label">Penguin Name: </div>
                            <div id="current-container" class="value"></div>
                        </div>
                    </div>

                    <div class="row centered container-backend hide">
                        <div class="ui statistic">
                            <div class="label">Penguin Race: </div>
                            <div id="randomRace"></div>
                            
                        </div>
                    </div>

                    {{ if .ShowVersion }}
                    <div class="row centered container-backend hide">
                        <div class="ui large statistic">
                            <div id="current-container-version" class="value"></div>
                            <div class="label">current version</div>
                        </div>
                    </div>
                    {{ end }}

                    {{ if ne .Metadata "" }}
                    <div class="row centered extra-info">
                        {{ .Metadata }}
                    </div>
                    {{ end }}
                </div>
            </div>

        </div>
    </body>
</html>
